import React from 'react';
import PropTypes from 'prop-types';
declare const withTailwind: (Component: any, { ignore }?: {
    ignore: any[];
}) => {
    ({ className, ...props }: {
        className: any;
    }): JSX.Element;
    displayName: string;
    propTypes: {
        visuallyHidden: PropTypes.Requireable<boolean>;
        visuallyHiddenFocusable: PropTypes.Requireable<boolean>;
        container: PropTypes.Requireable<boolean>;
        opacity: PropTypes.Requireable<React.ReactText>;
        shadow: PropTypes.Requireable<string | boolean>;
        list: PropTypes.Requireable<string>;
        outline: PropTypes.Requireable<string>;
        appearance: PropTypes.Requireable<string>;
        select: PropTypes.Requireable<string>;
        pointerEvents: PropTypes.Requireable<string>;
        fill: PropTypes.Requireable<string>;
        h: PropTypes.Requireable<React.ReactText>;
        maxH: PropTypes.Requireable<React.ReactText>;
        minH: PropTypes.Requireable<React.ReactText>;
        maxW: PropTypes.Requireable<React.ReactText>;
        minW: PropTypes.Requireable<React.ReactText>;
        w: PropTypes.Requireable<React.ReactText>;
        m: PropTypes.Requireable<string | number | PropTypes.InferProps<{
            t: PropTypes.Requireable<React.ReactText>;
            r: PropTypes.Requireable<React.ReactText>;
            b: PropTypes.Requireable<React.ReactText>;
            l: PropTypes.Requireable<React.ReactText>;
            x: PropTypes.Requireable<React.ReactText>;
            y: PropTypes.Requireable<React.ReactText>;
        }>>;
        nm: PropTypes.Requireable<string | number | PropTypes.InferProps<{
            t: PropTypes.Requireable<React.ReactText>;
            r: PropTypes.Requireable<React.ReactText>;
            b: PropTypes.Requireable<React.ReactText>;
            l: PropTypes.Requireable<React.ReactText>;
            x: PropTypes.Requireable<React.ReactText>;
            y: PropTypes.Requireable<React.ReactText>;
        }>>;
        p: PropTypes.Requireable<string | number | PropTypes.InferProps<{
            t: PropTypes.Requireable<React.ReactText>;
            r: PropTypes.Requireable<React.ReactText>;
            b: PropTypes.Requireable<React.ReactText>;
            l: PropTypes.Requireable<React.ReactText>;
            x: PropTypes.Requireable<React.ReactText>;
            y: PropTypes.Requireable<React.ReactText>;
        }>>;
        content: PropTypes.Requireable<string>;
        flex: PropTypes.Requireable<string | number | boolean | (string | number | boolean | null | undefined)[]>;
        inlineFlex: PropTypes.Requireable<boolean>;
        items: PropTypes.Requireable<string>;
        self: PropTypes.Requireable<string>;
        justify: PropTypes.Requireable<string>;
        border: PropTypes.Requireable<string | boolean | any[]>;
        borderB: PropTypes.Requireable<number>;
        borderL: PropTypes.Requireable<number>;
        borderR: PropTypes.Requireable<number>;
        borderT: PropTypes.Requireable<number>;
        rounded: PropTypes.Requireable<string | boolean>;
        roundedB: PropTypes.Requireable<string | boolean>;
        roundedBl: PropTypes.Requireable<string | boolean>;
        roundedBr: PropTypes.Requireable<string | boolean>;
        roundedL: PropTypes.Requireable<string | boolean>;
        roundedR: PropTypes.Requireable<string | boolean>;
        roundedT: PropTypes.Requireable<string | boolean>;
        roundedTl: PropTypes.Requireable<string | boolean>;
        roundedTr: PropTypes.Requireable<string | boolean>;
        bg: PropTypes.Requireable<string | any[]>;
        align: PropTypes.Requireable<string>;
        break: PropTypes.Requireable<string>;
        capitalize: PropTypes.Requireable<boolean>;
        font: PropTypes.Requireable<string | any[]>;
        italic: PropTypes.Requireable<boolean>;
        text: PropTypes.Requireable<string | any[]>;
        tracking: PropTypes.Requireable<string>;
        leading: PropTypes.Requireable<string>;
        lineThrough: PropTypes.Requireable<boolean>;
        lowercase: PropTypes.Requireable<boolean>;
        normalCase: PropTypes.Requireable<boolean>;
        noUnderline: PropTypes.Requireable<boolean>;
        notItalic: PropTypes.Requireable<boolean>;
        truncate: PropTypes.Requireable<boolean>;
        underline: PropTypes.Requireable<boolean>;
        uppercase: PropTypes.Requireable<boolean>;
        whitespace: PropTypes.Requireable<string>;
        z: PropTypes.Requireable<React.ReactText>;
        absolute: PropTypes.Requireable<boolean>;
        fixed: PropTypes.Requireable<boolean>;
        inset: PropTypes.Requireable<React.ReactText>;
        top: PropTypes.Requireable<number>;
        bottom: PropTypes.Requireable<number>;
        left: PropTypes.Requireable<number>;
        right: PropTypes.Requireable<number>;
        relative: PropTypes.Requireable<boolean>;
        static: PropTypes.Requireable<boolean>;
        overflow: PropTypes.Requireable<string>;
        overflowX: PropTypes.Requireable<string>;
        overflowY: PropTypes.Requireable<string>;
        clearfix: PropTypes.Requireable<boolean>;
        float: PropTypes.Requireable<string>;
        block: PropTypes.Requireable<boolean>;
        hidden: PropTypes.Requireable<boolean>;
        inline: PropTypes.Requireable<boolean>;
        inlineBlock: PropTypes.Requireable<boolean>;
        table: PropTypes.Requireable<boolean>;
        tableCell: PropTypes.Requireable<boolean>;
        tableRow: PropTypes.Requireable<boolean>;
        className: PropTypes.Requireable<string>;
    };
    defaultProps: {
        className: undefined;
    };
};
export default withTailwind;
